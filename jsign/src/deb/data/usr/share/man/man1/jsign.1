.\" Manpage for jsign.
.TH man 1 "25 Mar 2021" "@VERSION@" "jsign man page"

.SH NAME
jsign \- code signing tool for Windows executable files, installer packages and scripts

.SH SYNOPSIS
.B jsign
[OPTIONS] [FILE] [PATTERN] [@FILELIST]...

.SH DESCRIPTION
Jsign is a versatile code signing tool that allows you to sign and timestamp
Windows executable files, installer packages and scripts. Jsign is platform
independent and provides an alternative to native tools like signtool on Windows
or the Mono development tools on Unix systems.

It supports the following file formats:
.br
- Windows executable files (.exe) and libraries (.dll)
.br
- Microsoft Installers (.msi)
.br
- Cabinet files (.cab)
.br
- Catalog files (.cat)
.br
- Windows packages (.appx, .msix)
.br
- Microsoft Dynamics 365 extension packages
.br
- NuGet packages
.br
- Windows scripts (PowerShell, VBScript, JScript, WSF)

Jsign can use private keys and certificates in various formats, either Java keystores,
PKCS#12 keystores, PKCS#11 hardware tokens, SPC/PVK files or from cloud key management
systems.

.SH OPTIONS

.TP
.B -s, --keystore <FILE>
Either the keystore file containing the certificate and the private key used for
signing, the SunPKCS11 configuration file when a PKCS#11 token is used, the cloud
keystore name, or the smart card or hardware token name. For file based keystores
this option must be specified unless the keyfile and certfile options are already
specified. For smart cards and hardware tokens, this option may be specified
to distinguish between multiple connected devices.

.TP
.B --storepass <PASSWORD>
The password to open the keystore. The password can be loaded from a file by using
the file: prefix followed by the path of the file, or from an environment variable
by using the env: prefix followed by the name of the variable.

.TP
.B --storetype <TYPE>
The type of the keystore:

File based:
.br
- JKS           : Java keystore (.jks files)
.br
- JCEKS         : SunJCE keystore (.jceks files)
.br
- PKCS12        : Standard PKCS#12 keystore (.p12 or .pfx files)

Hardware tokens;
.br
- PKCS11        : PKCS#11 hardware token
.br
- ETOKEN        : SafeNet eToken
.br
- NITROKEY      : Nitrokey HSM
.br
- OPENPGP       : OpenPGP card
.br
- OPENSC        : Smart card
.br
- PIV           : PIV card
.br
- YUBIKEY       : YubiKey security key (requires ykcs11)

Cloud key management systems:
.br
- AWS           : AWS Key Management Service
.br
- AZUREKEYVAULT : Azure Key Vault key management system
.br
- DIGICERTONE   : DigiCert ONE Secure Software Manager
.br
- ESIGNER       : SSL.com eSigner
.br
- GARASIGN      : Garantir Remote Signing
.br
- GOOGLECLOUD   : Google Cloud KMS
.br
- HASHICORPVAULT: HashiCorp Vault
.br
- ORACLECLOUD   : Oracle Cloud Key Management Service
.br
- TRUSTEDSIGNING: Azure Trusted Signing

This option is not required for file based keystores (JKS, JCEKS and PKCS12).

.TP
.B -a, --alias <NAME>
The alias of the certificate used for signing in the keystore. This option
is mandatory if the keystore option is specified and if the keystore contains more
than one alias.

.TP
.B --keypass <PASSWORD>
The password of the private key. When using a keystore, this parameter can be
omitted if the keystore shares the same password. The password can be loaded
from a file by using the file: prefix followed by the path of the file, or from
an environment variable by using the env: prefix followed by the name of the variable.

.TP
.B --keyfile <FILE>
The file containing the private key. PEM and PVK files are supported. This option
is used in combination with the certfile option.

.TP
.B -c, --certfile <FILE>
The file containing the PKCS#7 certificate chain, in PEM or DER format (.p7b or .spc files).
This parameter is required if --keystore isn't specified, or if the keystore used contains
only the key and not the certificate chain. It may be specified if the keystore holds only
the signing certificate and not the full certificate chain, otherwise Jsign will attempt
to download the missing certificates from the URL specified in the Authority Information
Access field of the certificates.

.TP
.B -d, --alg <ALGORITHM>
The digest algorithm (SHA-1, SHA-256, SHA-384 or SHA-512).

.TP
.B -t, --tsaurl <URL>
The URL of the timestamping authority, either RFC 3161 or Authenticode services.
You can use the Sectigo or the DigiCert services:
.br
- http://timestamp.sectigo.com
.br
- http://timestamp.digicert.com

Several URLs separated by a comma can be specified to fallback on alternative servers.

.TP
.B -m, --tsmode <MODE>
The timestamping mode (RFC3161 or Authenticode). The default mode is Authenticode.

.TP
.B -r, --tsretries <NUMBER>
The number of retries for timestamping (default to 3 attempts).

.TP
.B -w, --tsretrywait <SECONDS>
The number of seconds to wait between timestamping retries (10 seconds by default).

.TP
.B -n, --name <NAME>
The name of the application. This is an optional information embedded in the signature.

.TP
.B -u, --url <URL>
The URL of the application. This is an optional information embedded in the signature.

.TP
.B --proxyUrl <URL>
The URL of the HTTP proxy.

.TP
.B --proxyUser <NAME>
The user for the HTTP proxy. If a user is needed.

.TP
.B --proxyPass <PASSWORD>
The password for the HTTP proxy user. If a user is needed.

.TP
.B --replace
Tells if previous signatures should be replaced. By default the new signature is appended to the existing ones.

.TP
.B -e, --encoding <ENCODING>
The encoding of the script to be signed (UTF-8 by default, or the encoding specified by the byte order mark if there is one).

.TP
.B --detached
Tells if a detached signature should be generated or reused. The detached signature
is a file in the same directory using the name of the file signed with the .sig
suffix added (for example application.exe.sig).
.RS
.IP \- 2
If the signature doesn't exist, the file is signed as usual and the detached signature is generated.
.IP \-
If the signature exists it is attached to the file, replacing any existing signature
(in this case the private key isn't used for signing and no timestamping is performed).
.RE

.TP
.B --value
The value of the unsigned attribute when tagging a file. The value is either:
.br
- a string (such as a user id, a license key or a JWT token)
.br
- the name of the file to include, prefixed with file:
.br
- a binary value in hexadecimal format, prefixed with 0x

If no value is specified a default 1KB template is used, filled with zeros and delimited by
-----BEGIN TAG----- and -----END TAG----- markers.

.TP
.B --quiet
Print only error messages

.TP
.B --verbose
Print more information

.TP
.B --debug
Print debugging information

.TP
.B -h, --help
Print the help

After the options Jsign accepts one or more files to sign as arguments. The arguments may contain '*' or '**'
wildcards to match multiple files and scan through directories recursively. For example using "build/*.exe" will
sign the executables in the build directory, and "installdir/**/*.dll" will scan the installdir directory
recursively and sign all the DLLs found. If an argument starts with @ it is considered as a text file containing
a list of files to sign, one per line.


.SH EXAMPLES

.TP
Signing with a PKCS#12 keystore and timestamping:

jsign --keystore keystore.p12 --storepass password --alias test \\
      --tsaurl http://timestamp.sectigo.com application.exe


.TP
Signing with a SPC certificate and a PVK key:

jsign --certfile certificate.spc --keyfile key.pvk --keypass password installer.msi


.TP

Signing with a YubiKey:

When using a Yubikey, the alias is required only if the device contains more than one certificate.
The certificate is specified by its name (typically "X.509 Certificate for Digital Signature" for
the slot 9c, or "X.509 Certificate for PIV Authentication" for the slot 9a). The ykcs11 library
from the Yubico PIV Tool must be installed on the system at the default location. The library
is provided by the yubico-piv-tool package on Fedora, and by the ykcs11 package on Debian/Ubuntu.

jsign --storetype YUBIKEY --storepass 123456 --certfile full-chain.pem application.exe

Alternatively, the PIV storetype can also be used to sign with a Yubikey and doesn't require
the ykcs11 library.

.TP

Signing with a Nitrokey HSM:

Signing with a Nitrokey HSM requires the installation of the OpenSC PKCS#11 module. The module
is provided by the opensc package on Fedora, and by the opensc-pkcs11 package on Debian/Ubuntu.

jsign --storetype NITROKEY --storepass 123456 --alias test --certfile full-chain.pem application.exe

Other Nitrokeys based on the OpenPGP card standard are also supported with this storetype,
but an X.509 certificate must be imported into the Nitrokey (using the gnupg writecert command).
Keys without certificates are ignored. Alternatively, the OPENPGP storetype can also be used,
it doesn't require OpenSC and any key can be used by providing an external certificate.


.TP

Signing with a SafeNet eToken:

Signing with a SafeNet eToken requires the installation of the SafeNet Authentication Client.

jsign --storetype ETOKEN --storepass <PIN> --certfile full-chain.pem application.exe


.TP

Signing with a smart card:

Signing with a smart card requires the installation of the OpenSC PKCS#11 module. The module
is provided by the opensc package on Fedora, and by the opensc-pkcs11 package on Debian/Ubuntu.

jsign --storetype OPENSC --storepass 123456 --alias test --certfile full-chain.pem application.exe

If multiple devices are connected, the keystore parameter can be used to specify the name of the one to use.


.TP

Signing with an OpenPGP card:

OpenPGP cards contain up to 3 keys, one for signing, one for encryption, and one for authentication.
All of them can be used for code signing (except encryption keys based on an elliptic curve). The alias
to select the key is either, SIGNATURE, ENCRYPTION or AUTHENTICATION. The OPENPGP storetype can be used
with a Nitrokey (non-HSM models) or a Yubikey.

jsign --storetype OPENPGP --storepass 123456 --alias SIGNATURE --certfile full-chain.pem application.exe

X.509 certificates stored on the card are automatically used, and the certfile parameter is only required
if the certificate chain contains an intermediate certificate.

If multiple devices are connected, the keystore parameter can be used to specify the name of the one to use.


.TP

Signing with a PIV card:

PIV cards contain up to 24 keys and certificates. The alias to select the key is either AUTHENTICATION,
SIGNATURE, KEY_MANAGEMENT, CARD_AUTHENTICATION, or RETIRED<1-20>. Slot numbers are also accepted
(for example '9c' for the digital signature key).

jsign --storetype PIV --storepass 123456 --alias SIGNATURE --certfile full-chain.pem application.exe

X.509 certificates stored on the card are automatically used, and the certfile parameter is only required
if the certificate chain contains an intermediate certificate.

If multiple devices are connected, the keystore parameter can be used to specify the name of the one to use.


.TP

Signing with AWS Key Management Service:

AWS Key Management Service stores only the private key, the certificate must be provided separately.
The keystore parameter references the AWS region.

The AWS access key, secret key, and optionally the session token, are concatenated and used as
the storepass parameter; if the latter is not provided, Jsign attempts to fetch the credentials
from the environment variables (AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY and AWS_SESSION_TOKEN)
or from the IMDSv2 service when running on an AWS EC2 instance.

In any case, the credentials must allow the following actions: kms:ListKeys, kms:DescribeKey and kms:Sign.

The alias parameter can specify either the key id or an alias.

jsign --storetype AWS \\
      --keystore eu-west-3 \\
      --storepass "<access-key>|<secret-key>|<session-token>" \\
      --alias 12345678-abcd-1234-cdef-1234567890ab \\
      --certfile full-chain.pem application.exe


.TP

Signing with Azure Key Vault:

Certificates and keys stored in the Azure Key Vault key management system can be used with:

jsign --storetype AZUREKEYVAULT \\
      --keystore vaultname \\
      --storepass <api-access-token> \\
      --alias test application.exe

The access token can be obtained with the Azure CLI:

az account get-access-token --resource "https://vault.azure.net"

The Azure account used must have the "Key Vault Crypto User" and "Key Vault Certificate User" roles.

.TP

Signing with Azure Trusted Signing

With the Azure Trusted Signing service the keystore parameter specifies the endpoint URI, and the alias combines
the account name and the certificate profile. The Azure API access token is used as the keystore password.

jsign --storetype TRUSTEDSIGNING \
      --keystore weu.codesigning.azure.net \
      --storepass <api-access-token> \
      --alias <account>/<profile> application.exe

The access token can be obtained with the Azure CLI:

az account get-access-token --resource https://codesigning.azure.net

The Azure account used must have the "Code Signing Certificate Profile Signer" role.

The certificates issued by Azure Trusted Signing have a lifetime of 3 days only, and timestamping is necessary to
ensure the long term validity of the signature. For this reason timestamping is automatically enabled when signing
with this service.

Implementation note: Jsign performs an extra call to the signing API to retrieve the current certificate chain before
signing. When signing multiple files it's recommended to invoke Jsign only once with the list of files to avoid doubling
the quota usage.

.TP

Signing with DigiCert ONE / DigiCert KeyLocker:

Certificates and keys stored in the DigiCert ONE Secure Software Manager can be used directly without installing
the DigiCert client tools. It requires an API key and a PKCS#12 keystore holding a client certificate for the
authentication. The US DigiCert ONE host is used by default (https://clientauth.one.digicert.com) but a different
host can be specified with the --keystore parameter.

jsign --storetype DIGICERTONE \\
      --storepass "<api-key>|/path/to/Certificate_pkcs12.p12|<password>" \\
      --alias test application.exe


.TP

Signing with SSL.com eSigner:

When signing with the SSL.com eSigner service, the SSL.com username and password are used as the keystore password,
and the base64 encoded TOTP secret is used as the key password:

jsign --storetype ESIGNER \\
      --storepass "<username>|<password>" \\
      --alias 8b072e22-7685-4771-b5c6-48e46614915f \\
      --keypass <totp-secret> application.exe

SSL.com provides a sandbox environment, to use a test certificate simply add the parameter
"--keystore https://cs-try.ssl.com".


.TP

Signing with GaraSign:

GaraSign is a remote signing service provided by Garantir. The authentication is performed by specifying
the username/password or the TLS client certificate in the storepass parameter. If the TLS client certificate
is stored in a password protected keystore, the password is specified in the keypass parameter. The keystore
parameter references the URL of the GaraSign REST API (https://garasign.com:8443/CodeSigningRestService/ by default).

Authenticating with a username and a password:

jsign --storetype GARASIGN \\
      --storepass "<username>|<password>" \\
      --alias test \\
      application.exe

Authenticating with a TLS client certificate and a non-default endpoint:

jsign --storetype GARASIGN \\
      --keystore https://demo.garantir.io/CodeSigningRestService \\
      --storepass "/path/to/client-certificate.p12" \\
      --keypass <client-certificate-password> \\
      --alias test \\
      application.exe


.TP

Signing with Google Cloud KMS:

Google Cloud KMS stores only the private key, the certificate must be provided separately. The keystore parameter
references the path of the keyring. The alias specifies the name and the version of the key:

jsign --storetype GOOGLECLOUD \\
      --keystore projects/first-rain-123/locations/global/keyRings/mykeyring \\
      --storepass <api-access-token> \\
      --alias test/cryptoKeyVersions/1 \\
      --certfile full-chain.pem application.exe

The version of the key can be omitted (e.g. --alias test), in this case the most recent version
of the key is picked automatically. This avoids modifying the parameters every time the key is updated, but the signing
process is slightly slower due to an additional API call, and it requires an extra permission.

The access token is typically provided by the gcloud tool:

gcloud auth print-access-token

When creating the key the purpose must be set to "Asymmetric sign", and the algorithm must be either Elliptic Curve
or RSA with PKCS#1 v1.5 padding and SHA digest. Keys with PSS padding or raw RSA mode are not supported.

The Google Cloud account used must have the following permissions:

.br
\- cloudkms.cryptoKeyVersions.useToSign
.br
\- cloudkms.cryptoKeyVersions.list (required if the version of the key isn't specified)
.br
\- cloudkms.cryptoKeys.list (required to list the key availables when the alias isn't found)

These permissions are covered by the 'Cloud KMS CryptoKey Signer' and 'Cloud KMS Viewer' roles.


.TP

Signing with HashiCorp Vault:

HashiCorp Vault exposes keys through secrets engines. Jsign supports the Google Cloud KMS and Transit secrets engines.
The keystore parameter references the endpoint of the secrets engine, which is typically the Vault server URL and the
API version 'v1' followed by the secrets engine path. The certificate must be provided separately using the certfile
parameter. The alias parameter specifies the name of the key in Vault. For the Google Cloud KMS secrets engine, the
version of the Google Cloud key is appended to the key name, separated by a colon character.

jsign --storetype HASHICORPVAULT \\
      --keystore https://vault.example.com/v1/gcpkms \\
      --storepass <vault-token> \\
      --alias test:1 \\
      --certfile full-chain.pem application.exe


.TP

Signing with Oracle Cloud Key Management Service

Signing with the Oracle Cloud Infrastructure Key Management Service requires the configuration file or
the environment variables used by the OCI CLI. The OCI CLI isn't required for signing, but it may be used
to initialize the configuration file with 'oci setup bootstrap'.

The storepass parameter specifies the path to the configuration file (~/.oci/config by default). If the
configuration file contains multiple profiles, the name of the non-default profile to use is appended
to the storepass (for example ~/.oci/config|PROFILE).
The keypass parameter may be used to specify the passphrase of the key file used for signing the requests
to the OCI API if it isn't set in the configuration file.

The certificate must be provided separately using the certfile parameter. The alias specifies the OCID of the key.

The general syntax looks like this:

jsign --storetype ORACLECLOUD \\
      --storepass "<oci-config-file>|<profile>" \\
      --alias ocid1.key.oc1.eu-paris-1.abcdefghijklm.abrwiljrwkhgllb5zfqchmvdkmqnzutqeq5pz7 \\
      --certfile full-chain.pem application.exe

When using the default configuration file and profile, the command is simplified to:

jsign --storetype ORACLECLOUD \\
      --alias ocid1.key.oc1.eu-paris-1.abcdefghijklm.abrwiljrwkhgllb5zfqchmvdkmqnzutqeq5pz7 \\
      --certfile full-chain.pem application.exe

The configuration file can be replaced (or overridden) by environment variables. Here are the variables expected:

.br
\- OCI_CLI_USER        : OCID of the user (e.g. ocid1.user.oc1..<unique_ID>)
.br
\- OCI_CLI_TENANCY     : The OCID of the tenancy (e.g. ocid1.tenancy.oc1..<unique_ID>)
.br
\- OCI_CLI_REGION      : The OCI region (e.g. eu-paris-1)
.br
\- OCI_CLI_KEY_FILE    : The path to the private key signing the API requests in PEM format
.br
\- OCI_CLI_PASS_PHRASE : The pass phrase of the private key


.TP

Tagging

A signed file can be modified to include additional data without invalidating the signature. This feature is useful
for embedding user identification data, such as a licence key or a session token, within a signed installer when the
file is downloaded. Upon installation, the installer extracts this data, enabling the application to automatically
authenticate the user without requiring credentials.

For example, to tag a signed installer with a licence key:

jsign tag --value userid:1234-ABCD-5678-EFGH installer.exe

For an executable file, the tag can be found next to the timestamp of the signature, in the last few kilobytes
of the file.

A common pattern consist in embedding a default template at build time, providing enough space for the data
to be inserted when the file is downloaded. This allows a simple search-and-replace operation to be performed
on the download server without needing Jsign to be installed. For example:

jsign tag --value "<TEMPLATE>XXXXXXXXXXXXXXXXXXXXXXXXXXX</TEMPLATE>" installer.exe

If the value parameter is omitted Jsign will insert a default 1KB template filled with zeros, delimited by
-----BEGIN TAG----- and -----END TAG----- markers.


.SH REPORTING BUGS
Bugs and suggestions can be reported to the project home page: https://ebourg.github.io/jsign

.SH AUTHOR
Emmanuel Bourg (ebourg@apache.org)
